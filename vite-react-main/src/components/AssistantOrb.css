import { useEffect, useRef, useState } from "react";

export default function AssistantOrb() {
  const ref = useRef<HTMLDivElement>(null);
  const [pos, setPos] = useState<{x:number;y:number}>(() => {
    try { const s = localStorage.getItem("orb-pos"); if (s) return JSON.parse(s); } catch {}
    return { x: window.innerWidth - 64 - 14, y: window.innerHeight - 64 - 14 }; // BR spawn
  });
  const [listening, setListening] = useState(false);

  useEffect(() => {
    localStorage.setItem("orb-pos", JSON.stringify(pos));
    if (ref.current) ref.current.style.transform = `translate(${pos.x}px, ${pos.y}px)`;
  }, [pos]);

  const clamp = (x:number, y:number) => {
    const w = window.innerWidth, h = window.innerHeight, sz = 64, pad = 8;
    return { x: Math.min(Math.max(x, pad), w - sz - pad), y: Math.min(Math.max(y, pad), h - sz - pad) };
  };

  function onDown(e: React.PointerEvent) {
    (e.target as Element).setPointerCapture(e.pointerId);
    setListening(true);
    const sx = e.clientX - pos.x, sy = e.clientY - pos.y;

    const move = (ev: PointerEvent) => setPos(clamp(ev.clientX - sx, ev.clientY - sy));
    const up = () => {
      setListening(false);
      window.removeEventListener("pointermove", move);
      window.removeEventListener("pointerup", up);
    };
    window.addEventListener("pointermove", move);
    window.addEventListener("pointerup", up);
  }

  return (
    <div
      ref={ref}
      className={`ai-orb ${listening ? "listening" : ""}`}
      role="button"
      aria-label="AI Orb"
      title="AI Orb"
      onPointerDown={onDown}
      style={{ transform: `translate(${pos.x}px, ${pos.y}px)` }}
    >
      <div className="core" />
      <div className="swirl" />
      <div className="spec" />
    </div>
  );
}
